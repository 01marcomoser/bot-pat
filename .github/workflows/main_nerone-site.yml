name: Deploy Next.js to Azure Web App

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  AZURE_WEBAPP_NAME: 'nerone-site'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Create deployment package
        run: |
          # Crea directory per il deployment
          mkdir -p deploy
          
          # Copia i file necessari per Next.js
          cp -r .next deploy/
          cp -r public deploy/
          cp package.json package-lock.json deploy/
          cp next.config.mjs deploy/
          
          # Crea package.json per produzione con script di start
          cat > deploy/package.json << 'EOF'
          {
            "name": "nerone-site",
            "version": "1.0.0",
            "scripts": {
              "start": "next start",
              "build": "next build"
            },
            "dependencies": {
              "next": "latest",
              "react": "latest",
              "react-dom": "latest"
            }
          }
          EOF
          
          # Crea web.config per Azure (importante!)
          cat > deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                node_env="production"
                nodeProcessCommandLine="node --max-old-space-size=460 ./node_modules/.bin/next start"
                interceptor="iisnode-intercept.js"/>
            </system.webServer>
          </configuration>
          EOF
          
          # Crea server.js per Azure Web App
          cat > deploy/server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')
          
          const dev = process.env.NODE_ENV !== 'production'
          const hostname = 'localhost'
          const port = process.env.PORT || 3000
          
          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true)
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            }).listen(port, (err) => {
              if (err) throw err
              console.log(`> Ready on http://${hostname}:${port}`)
            })
          })
          EOF
          
          # Lista i file per debug
          echo "=== CONTENUTO DEPLOY FOLDER ==="
          ls -la deploy/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-deployment
          path: deploy/
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v4
        with:
          name: nextjs-deployment
          path: ./deploy

      - name: Debug deployment info
        run: |
          echo "=== DEPLOYMENT DEBUG INFO ==="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Expected OIDC subject: repo:${{ github.repository }}:ref:${{ github.ref }}"
          echo "=== DEPLOYMENT FILES ==="
          ls -la ./deploy

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure access
        run: |
          echo "=== VERIFICA ACCESSO AZURE ==="
          az account show --output table
          az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group NeroneBot --query "{Name:name,State:state,Location:location,Runtime:linuxFxVersion}" --output table

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: './deploy'

      - name: Post-deployment verification
        run: |
          echo "=== DEPLOYMENT COMPLETATO ==="
          echo "URL dell'app: https://nerone-site.azurewebsites.net"

          # Controlla lo stato dell'app
          az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group NeroneBot --query state -o tsv

